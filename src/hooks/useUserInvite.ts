
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface InviteForm {
  email: string;
  nome: string;
  nivel_permissao: "admin" | "editor" | "visualizacao" | "operacional";
}

export const useUserInvite = () => {
  const [inviteForm, setInviteForm] = useState<InviteForm>({
    email: "",
    nome: "",
    nivel_permissao: "operacional"
  });
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleInviteUser = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validar campos obrigat√≥rios
    if (!inviteForm.email || !inviteForm.nome || !inviteForm.nivel_permissao) {
      toast({
        title: "Erro de valida√ß√£o",
        description: "Todos os campos s√£o obrigat√≥rios.",
        variant: "destructive",
      });
      return;
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(inviteForm.email)) {
      toast({
        title: "Email inv√°lido",
        description: "Por favor, insira um email v√°lido.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);

    try {
      console.log('üöÄ Iniciando processo de convite:', inviteForm);

      // Verificar se o usu√°rio est√° autenticado e obter o token JWT
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('‚ùå Erro ao obter sess√£o:', sessionError);
        throw new Error('Erro ao verificar autentica√ß√£o');
      }

      if (!session || !session.access_token) {
        console.error('‚ùå Usu√°rio n√£o autenticado ou token n√£o encontrado');
        throw new Error('Voc√™ precisa estar logado para enviar convites. Fa√ßa login novamente.');
      }

      console.log('‚úÖ Usu√°rio autenticado, token obtido');

      // Preparar o corpo da requisi√ß√£o exatamente como esperado pela fun√ß√£o
      const requestBody = {
        email: inviteForm.email.trim(),
        nome: inviteForm.nome.trim(),
        nivel_permissao: inviteForm.nivel_permissao
      };

      console.log('üì¶ Enviando dados:', requestBody);

      // Chamar a edge function com POST, JSON correto e headers adequados
      const { data, error } = await supabase.functions.invoke('invite-user', {
        method: 'POST',
        body: requestBody,
        headers: {
          'Authorization': `Bearer ${session.access_token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Resposta da edge function:', { data, error });

      if (error) {
        console.error('‚ùå Erro da edge function:', error);
        throw new Error(error.message || 'Erro ao chamar fun√ß√£o de convite');
      }

      if (!data?.success) {
        console.error('‚ùå Fun√ß√£o retornou erro:', data?.error);
        throw new Error(data?.error || 'Erro desconhecido na fun√ß√£o de convite');
      }

      console.log('‚úÖ Convite enviado com sucesso');

      toast({
        title: "Convite enviado!",
        description: `Convite enviado para ${inviteForm.email}. O usu√°rio receber√° um email para definir a senha.`,
      });

      // Limpar formul√°rio
      setInviteForm({
        email: "",
        nome: "",
        nivel_permissao: "operacional"
      });

    } catch (error: any) {
      console.error('üí• Erro no processo de convite:', error);
      
      let errorMessage = "N√£o foi poss√≠vel enviar o convite.";
      
      if (error.message?.includes('estar logado') || error.message?.includes('Fa√ßa login novamente')) {
        errorMessage = "Voc√™ precisa estar logado para enviar convites. Fa√ßa login novamente.";
      } else if (error.message?.includes('Admin permission required')) {
        errorMessage = "Apenas administradores podem enviar convites.";
      } else if (error.message?.includes('Invalid or expired authentication')) {
        errorMessage = "Sua sess√£o expirou. Fa√ßa login novamente.";
      } else if (error.message?.includes('Missing required fields')) {
        errorMessage = "Todos os campos s√£o obrigat√≥rios.";
      } else if (error.message?.includes('Invalid JSON')) {
        errorMessage = "Erro interno no envio dos dados. Tente novamente.";
      } else if (error.message) {
        errorMessage = error.message;
      }

      toast({
        title: "Erro ao enviar convite",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    inviteForm,
    setInviteForm,
    isLoading,
    handleInviteUser
  };
};
