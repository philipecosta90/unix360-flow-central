
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface InviteForm {
  email: string;
  nome: string;
  nivel_permissao: "admin" | "editor" | "visualizacao" | "operacional";
}

export const useUserInvite = () => {
  const [inviteForm, setInviteForm] = useState<InviteForm>({
    email: "",
    nome: "",
    nivel_permissao: "operacional"
  });
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleInviteUser = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validar campos obrigat√≥rios
    if (!inviteForm.email || !inviteForm.nome || !inviteForm.nivel_permissao) {
      toast({
        title: "Erro de valida√ß√£o",
        description: "Todos os campos s√£o obrigat√≥rios.",
        variant: "destructive",
      });
      return;
    }

    // Validar formato do email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(inviteForm.email)) {
      toast({
        title: "Email inv√°lido",
        description: "Por favor, insira um email v√°lido.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);

    try {
      console.log('üöÄ Chamando fun√ß√£o create-user diretamente:', inviteForm);

      // Chamar a fun√ß√£o create-user em vez de invite-user
      const { data, error } = await supabase.functions.invoke('create-user', {
        body: {
          nome: inviteForm.nome.trim(),
          email: inviteForm.email.trim(),
          password: 'TempPassword123!',
          nivel_permissao: inviteForm.nivel_permissao
        }
      });

      console.log('üì° Resposta da edge function:', { data, error });

      if (error) {
        console.error('‚ùå Erro da edge function:', error);
        throw new Error(error.message || 'Erro ao criar usu√°rio');
      }

      if (!data?.success) {
        console.error('‚ùå Fun√ß√£o retornou erro:', data?.error);
        throw new Error(data?.error || 'Erro desconhecido na cria√ß√£o do usu√°rio');
      }

      console.log('‚úÖ Usu√°rio criado com sucesso');

      toast({
        title: "Usu√°rio criado com sucesso!",
        description: `Usu√°rio ${inviteForm.nome} criado. Senha tempor√°ria: TempPassword123!`,
      });

      // Limpar formul√°rio
      setInviteForm({
        email: "",
        nome: "",
        nivel_permissao: "operacional"
      });

    } catch (error: any) {
      console.error('üí• Erro no processo de cria√ß√£o:', error);
      
      let errorMessage = "N√£o foi poss√≠vel criar o usu√°rio.";
      
      if (error.message?.includes('estar logado') || error.message?.includes('Fa√ßa login novamente')) {
        errorMessage = "Voc√™ precisa estar logado para criar usu√°rios. Fa√ßa login novamente.";
      } else if (error.message?.includes('Admin permission required')) {
        errorMessage = "Apenas administradores podem criar usu√°rios.";
      } else if (error.message?.includes('User profile not found')) {
        errorMessage = "Perfil de usu√°rio n√£o encontrado. Verifique suas permiss√µes.";
      } else if (error.message) {
        errorMessage = error.message;
      }

      toast({
        title: "Erro ao criar usu√°rio",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return {
    inviteForm,
    setInviteForm,
    isLoading,
    handleInviteUser
  };
};
